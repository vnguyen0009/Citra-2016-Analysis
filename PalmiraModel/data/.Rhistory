pi
convert.fft(fft(pressure$pressure))
convert.fft <- function(cs, sample.rate=1) {
cs <- cs / length(cs) # normalize
distance.center <- function(c)signif( Mod(c),        4)
angle           <- function(c)signif( 180*Arg(c)/pi, 3)
df <- data.frame(cycle    = 0:(length(cs)-1),
freq     = 0:(length(cs)-1) * sample.rate / length(cs),
strength = sapply(cs, distance.center),
delay    = sapply(cs, angle))
df
}
convert.fft(fft(pressure$pressure))
fft(pressure$pressure)
abs(fft(pressure$pressure))
convert.fft(fft(pressure$pressure))
magnitude <- abs(fft(pressure$pressure))
convert <- convert.fft(fft(pressure$pressure))
View(convert)
N <- 3 #num of harmonics
time = pressure$time
for (ii in 2:N){
Amp <- convert[ii,'strength']
freq <- convert[ii, 'freq']
phi <- convert[ii,'delay']
result <- convert[1,'strength'] + sum(sin(Amp*2*pi*time)*cos(phi) + cos(Amp*2*pi*time)*sin(phi))
}
for (jj in 1:pressure$time){
for (ii in 2:N){
Amp <- convert[ii,'strength']
freq <- convert[ii, 'freq']
phi <- convert[ii,'delay']
result <- convert[1,'strength'] + sum(sin(Amp*2*pi*jj)*cos(phi) + cos(Amp*2*pi*jj)*sin(phi))
}
}
for (jj in 1:length(pressure$time)){
for (ii in 2:N){
Amp <- convert[ii,'strength']
freq <- convert[ii, 'freq']
phi <- convert[ii,'delay']
result <- convert[1,'strength'] + sum(sin(Amp*2*pi*jj)*cos(phi) + cos(Amp*2*pi*jj)*sin(phi))
}
}
plot(pressure$time, pressure$pressure)
pressure = data.frame("time" = seq(0,1,by=0.05),
'pressure' = c(700.2397,
742.2864,
916.9421,
1254.933,
1575.135,
1691.572,
1688.338,
1615.565,
1526.62,
1457.081,
1398.862,
1345.495,
1298.597,
1248.464,
1182.16,
1114.238,
1033.379,
949.2857,
847.4032,
705.0913,
580.5683
))
pressure$time = as.numeric(pressure$time)
fft(pressure$pressure)
# cs is the vector of complex points to convert
convert.fft <- function(cs, sample.rate=1) {
cs <- cs / length(cs) # normalize
distance.center <- function(c)signif( Mod(c),        4)
angle           <- function(c)signif( 180*Arg(c)/pi, 3)
df <- data.frame(cycle    = 0:(length(cs)-1),
freq     = 0:(length(cs)-1) * sample.rate / length(cs),
strength = sapply(cs, distance.center),
delay    = sapply(cs, angle))
df
}
convert <- convert.fft(fft(pressure$pressure))
plot(pressure$time, pressure$pressure)
result <- DC + sum(Amp*sin(wavelength*time+phi))
DC <- convert$strength[1]
for (ii in c(1:21)){
Amp <- convert$strength[1:N]
wavelength <- convert$freq[1:N]
phi <- convert$delay[1:N]
result <- DC + sum(Amp*sin(wavelength*time+phi))
}
for (ii in c(1:21)){
Amp <- convert$strength[1:N]
wavelength <- convert$freq[1:N]
phi <- convert$delay[1:N]
result <- DC + sum(Amp*sin(wavelength*ii+phi))
}
result <- DC + sum(Amp*sin(wavelength*ii+phi))
rm(list = ls())
pressure = data.frame("time" = seq(0,1,by=0.05),
'pressure' = c(700.2397,742.2864,916.9421,1254.933,1575.135,1691.572,
1688.338,1615.565,1526.62,1457.081,1398.862,1345.495,
1298.597,1248.464,1182.16,1114.238,1033.379,949.2857,
847.4032,705.0913,580.5683))
pressure$time = as.numeric(pressure$time)
dr = 0.0001
mu = 2.87E-3 #Pa*s
L = 0.05 #m
R = 0.005 #m
flow <- function(radius, delta_P){
Vz = delta_P/(4*mu*L)*(R^2 - radius^2)
return(Vz)
}
plot(pressure$time, pressure$pressure)
for (ii in seq(0:R,dr)){
Vz = flow(ii, pressure$pressure)
print(Vz)
}
plot(0,0, ylim = c(0,80))
for (ii in seq(0:R,dr)){
Vz = flow(ii, pressure$pressure)
print(Vz)
lines(pressure$time, Vz, col='red')
}
plot(0,0, ylim = c(0,80), xlim = c(0,1))
for (ii in seq(0:R,dr)){
Vz = flow(ii, pressure$pressure)
print(Vz)
lines(pressure$time, Vz, col='red')
}
plot(0,0, ylim = c(0,80), xlim = c(0,1), xlab = 'Time', ylab = 'Velocity')
for (ii in seq(0:R,dr)){
Vz = flow(ii, pressure$pressure)
print(Vz)
lines(pressure$time, Vz, col='red')
}
seq(0:R,dr)
for (ii in seq(0,R,dr)){
Vz = flow(ii, pressure$pressure)
print(Vz)
lines(pressure$time, Vz, col='red')
}
plot(0,0, ylim = c(0,80), xlim = c(0,1), xlab = 'Time', ylab = 'Velocity')
for (ii in seq(0,R,dr)){
Vz = flow(ii, pressure$pressure)/10 #division by 10 to get velocityfrom dynes/cm^2 to m/s
print(Vz)
lines(pressure$time, Vz, col='red')
}
plot(0,0, ylim = c(0,8), xlim = c(0,1), xlab = 'Time', ylab = 'Velocity')
for (ii in seq(0,R,dr)){
Vz = flow(ii, pressure$pressure)/10 #division by 10 to get velocityfrom dynes/cm^2 to m/s
print(Vz)
lines(pressure$time, Vz, col='red')
}
plot(0,0, ylim = c(0,8), xlim = c(0,1), xlab = 'Time (s)', ylab = 'Velocity (m/s)')
for (ii in seq(0,R,dr)){
Vz = flow(ii, pressure$pressure)/10 #division by 10 to get velocityfrom dynes/cm^2 to m/s
print(Vz)
lines(pressure$time, Vz, col='red')
}
setwd("~/work/UF ABE 2014-2019/Data/Citra2016/analysis/BranchingAnalysis")
rm(list=ls())
library(dplyr)
library(plyr)
library(ggplot2)
library(reshape2)
library(stats)
library(ggbiplot)
wd <- getwd()
setwd(paste(wd,'data', sep='/'))
source(paste(wd, 'src', sep='/', 'logCurveFit.R'))
source(paste(wd, 'src', sep='/', 'linearFit.R'))
dat <- read.csv('BOR Phys.csv',
na.strings = c('', 'NA', '*', '.', '?'), stringsAsFactors = F)
MSnB <- dat[,c(1:5,11,13,119, grep(c('BR\\d|BRNOD\\d|BRLEN\\d|NL\\d'),colnames(dat)))]
lineDat <- MSnB##[MSnB$Genotype %in% c('CAL','JAM'), ]
lineDat$TOTALBR <-rowSums(lineDat[,grep('BR\\d',colnames(lineDat))], na.rm = T)
lineDat[lineDat$TOTALBR==0,'TOTALBR'] <- NA
lineDat$TOTALBRNOD <- rowSums(lineDat[,grep('BRNOD\\d',colnames(lineDat))], na.rm = T)
lineDat[lineDat$TOTALBRNOD==0,'TOTALBRNOD'] <- NA
lineDat$TOTALMSL <- rowSums(lineDat[,grep('NL\\d', colnames(lineDat))], na.rm=T)
lineDat[lineDat$TOTALMSL==0,'TOTALMSL'] <- NA
##### PRINCIPLE COMPONENT ANALYSIS ######
PCAdata <- na.omit(lineDat[,c(1:8,62:64)])
dat.pcs <- prcomp(PCAdata[,c(6:11)], center = TRUE, scale = TRUE)
summary(dat.pcs)
biplot <- ggbiplot(dat.pcs)
biplotLabels <- ggbiplot(dat.pcs, labels = PCAdata$Genotype)
print(biplot)
print(biplotLabels)
##### RELATING BRANCH NUMBER TO MSNODE NUM ######
selectedLine = c('JAM')
geno <- lineDat[lineDat$Genotype==selectedLine,]
plot(geno$DAP, geno$MSNOD)
plot(geno$MSNOD, geno$TOTALBR)
linearFit(x=geno$MSNOD, y=geno$TOTALBR, dat=geno)
linearFit(x=geno$MSNOD, y=geno$TOTALMSL, dat=geno)
plot(geno$MSNOD, geno$MSLEN)
curveDat <- geno[!is.na(geno$MSNOD),]
logCurveFit(x=curveDat$MSNOD,y=curveDat$MSLEN,
dat = curveDat,phi1Start = 30, phi2Start=-1.096,phi3Start = 0.5)
max(geno$MSLEN, na.rm=T)
max(geno$MSNOD, na.rm=T)
77/20
