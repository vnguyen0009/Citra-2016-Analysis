# Slide link
# https://uflorida-my.sharepoint.com/:p:/g/personal/hwang138_ufl_edu/Efn2A5lHjVxHkXqan2SJ9kUBL6w7utA98anrUA6qSN96Ug
# clear env
rm(list = ls())
dir=getwd()
# Load libraries
library(ggplot2);library(reshape2);library(gdata)
setwd(paste(dir,'src',sep='/'))
files=list.files()
for(file in files){source(file)}
setwd(dir)
# Set defaul parameter values
h0=233 # Height of drop [m]
m0=85 # Mass of individual [Kg]
bungy_cord_length_m=80 # bungy cord length [m]
bungy_cord_elastisity_constant=0.1 # bungy cord elastisity for each strand
n0=100 # Bungy cord strand count [-]
safe_distance=10 # Safe distance to gound [m]
# Define standard deviation of parameters
sd=data.frame('h'=1,'n'=1,'m'=2.5)
# Define uncertainty analysis sample count
sample_count=1000
# Gravitational constant [m/s2]
g=9.8
# Draf coefficient [-]
cd=1.3
# Air density [Kg / m3]
rho=1.2
# Effective area [m2]
A=.7
# Set up simulation time steps
time_sequence=seq(0,60,1)
# Compute starting vertical distance
vertical_distance_m=h0
# Compute bundy cord elasticity related info
bungy_cord=data.frame('elastisity_constant'=bungy_cord_elastisity_constant,
'strand_count'=n0,
'length_m'=bungy_cord_length_m)
bungy_cord$k=bungy_cord$elastisity_constant*bungy_cord$strand_count
# Compute person related info
person=data.frame('weight_kg'=m0,
'position_m'=vertical_distance_m)
# Define dataframe to store simulation results
time_series_data=as.data.frame(data.frame('sample_id'=0, # sample id
vertical_distance_m,
bungy_cord,
'weight_kg'=person$weight_kg,
'time'=time_sequence, # sequence of time points
'position_m'=person$position_m,
'dz_dt'=0)) # velocity
View(time_series_data)
?abs()
# clear env
rm(list = ls())
source('~/Classwork/ABE4662/leap_of_faith/main.R')
source('~/Classwork/ABE4662/leap_of_faith/main.R')
source('~/Classwork/ABE4662/leap_of_faith/main.R')
source('~/Classwork/ABE4662/leap_of_faith/main.R')
install.packages("gdata")
View(time_series_data)
# Load libraries
#install.packages('gdata')
library(ggplot2);library(reshape2);library(gdata)
setwd(paste(dir, 'Classwork','ABE4662', 'leap_of_faith', 'src',sep='/'))
files=list.files()
for(file in files){source(file)}
setwd(dir)
# Set defaul parameter values
h0=233 # Height of drop [m]
m0=85 # Mass of individual [Kg]
bungy_cord_length_m=80 # bungy cord length [m]
bungy_cord_elastisity_constant=0.1 # bungy cord elastisity for each strand
n0=100 # Bungy cord strand count [-]
safe_distance=10 # Safe distance to gound [m]
# Define standard deviation of parameters
sd=data.frame('h'=1,'n'=1,'m'=2.5)
# Define uncertainty analysis sample count
sample_count=1000
# Gravitational constant [m/s2]
g=9.8
# Draf coefficient [-]
cd=1.3
# Air density [Kg / m3]
rho=1.2
# Effective area [m2]
A=.7
# Set up simulation time steps
time_sequence=seq(0,60,1)
# Compute starting vertical distance
vertical_distance_m=h0
# Compute bundy cord elasticity related info
bungy_cord=data.frame('elastisity_constant'=bungy_cord_elastisity_constant,
'strand_count'=n0,
'length_m'=bungy_cord_length_m)
bungy_cord$k=bungy_cord$elastisity_constant*bungy_cord$strand_count
# Compute person related info
person=data.frame('weight_kg'=m0,
'position_m'=vertical_distance_m)
# Define dataframe to store simulation results
time_series_data=as.data.frame(data.frame('sample_id'=0, # sample id
vertical_distance_m,
bungy_cord,
'weight_kg'=person$weight_kg,
'time'=time_sequence, # sequence of time points
'position_m'=person$position_m,
'dz_dt'=0)) # velocity
# Run bungy_model
time_series_data=bungy_model(time_series_data)
# Compute change in velocity
netFoce = gForce - dForce - bForce
source('~/Classwork/ABE4662/leap_of_faith/main.R')
source('~/Classwork/ABE4662/leap_of_faith/main.R')
source('~/Classwork/ABE4662/leap_of_faith/main.R')
source('~/Classwork/ABE4662/leap_of_faith/main.R')
View(time_series_data)
source('~/Classwork/ABE4662/leap_of_faith/main.R')
View(UA_data)
source('~/Classwork/ABE4662/leap_of_faith/main.R')
View(time_series_data)
pdf('results.pdf')
dev.off()
dev.off()
source('~/Classwork/ABE4662/leap_of_faith/main.R')
View(time_series_data)
source('~/Classwork/ABE4662/leap_of_faith/main.R')
View(time_series_data)
source('~/Classwork/ABE4662/leap_of_faith/main.R')
View(time_series_data)
warnings()
source('~/Classwork/ABE4662/leap_of_faith/main.R')
warnings()
source('~/Classwork/ABE4662/leap_of_faith/main.R')
par(mfrow=c(4,1))
plot(density(UA_data$strand_count),
main=paste('strand_count: ',paste(round(min(UA_data$strand_count),2),round(max(UA_data$strand_count),2),sep='~'),sep=''))
plot(density(UA_data$vertical_distance_m),
main=paste('vertical_distance_m: ',paste(round(min(UA_data$vertical_distance_m),2),round(max(UA_data$vertical_distance_m),2),sep='~'),sep=''))
dev.off()
dev.off()
ggplot()+
geom_hline(yintercept=0,col='red')+
geom_hline(yintercept=safe_distance,linetype='dashed')+
geom_point(data=time_series_data_net,
aes(time,position_m),
alpha=0.4)+
geom_line(data=time_series_data,
aes(time,position_m),col='red')+
ggtitle(paste('prob(death) = ',
p_death,
' & prob(falling bellow ',
safe_distance,
' ms) = ',
p_beyond_safe_distance,sep=''))+
theme_bw()
par(mfrow=c(4,1))
plot(density(UA_data$strand_count),
main=paste('strand_count: ',paste(round(min(UA_data$strand_count),2),round(max(UA_data$strand_count),2),sep='~'),sep=''))
plot(density(UA_data$vertical_distance_m),
main=paste('vertical_distance_m: ',paste(round(min(UA_data$vertical_distance_m),2),round(max(UA_data$vertical_distance_m),2),sep='~'),sep=''))
plot(density(UA_data$weight_kg),
main=paste('weight_kg: ',paste(round(min(UA_data$weight_kg),2),round(max(UA_data$weight_kg),2),sep='~'),sep=''))
plot(density(UA_data$position_m),
main=paste('position_m: ',paste(round(min(UA_data$position_m),2),round(max(UA_data$position_m),2),sep='~'),sep=''))
par(mfrow=c(1,1))
plot(density(UA_data$strand_count),
main=paste('strand_count: ',paste(round(min(UA_data$strand_count),2),round(max(UA_data$strand_count),2),sep='~'),sep=''))
plot(density(UA_data$vertical_distance_m),
main=paste('vertical_distance_m: ',paste(round(min(UA_data$vertical_distance_m),2),round(max(UA_data$vertical_distance_m),2),sep='~'),sep=''))
plot(density(UA_data$weight_kg),
main=paste('weight_kg: ',paste(round(min(UA_data$weight_kg),2),round(max(UA_data$weight_kg),2),sep='~'),sep=''))
plot(density(UA_data$position_m),
main=paste('position_m: ',paste(round(min(UA_data$position_m),2),round(max(UA_data$position_m),2),sep='~'),sep=''))
par(mfrow=c(1,1))
ggplot()+
geom_hline(yintercept=0,col='red')+
geom_hline(yintercept=safe_distance,linetype='dashed')+
geom_point(data=time_series_data_net,
aes(time,position_m),
alpha=0.4)+
geom_line(data=time_series_data,
aes(time,position_m),col='red')+
ggtitle(paste('prob(death) = ',
p_death,
' & prob(falling bellow ',
safe_distance,
' ms) = ',
p_beyond_safe_distance,sep=''))+
theme_bw()
par(mfrow=c(4,1))
citation(dplyr,ggplot2)
citation(dplyr)
citation(ggplot2)
citation('ggplot2')
citation(c('ggplot2', 'dplyr', 'plyr', 'reshape2'))
citation('ggplot2')
citation('dplyr')
citation('plyr')
citation('reshape2')
?lm()
?lm.fit()
citation()
# Set defaul parameter values
h0=233 # Height of drop [m]
# Set defaul parameter values
h0=233 # Height of drop [m]
source('~/Classwork/ABE4662/leap_of_faith/main.R')
source('~/Classwork/ABE4662/leap_of_faith/main.R')
source('~/Classwork/ABE4662/leap_of_faith/main.R')
# Set defaul parameter values
h0=233 # Height of drop [m]
m0=49 # Mass of individual [Kg]
bungy_cord_length_m=80 # bungy cord length [m]
bungy_cord_elastisity_constant=0.1 # bungy cord elastisity for each strand
n0=100 # Bungy cord strand count [-]
safe_distance=10 # Safe distance to gound [m]
# Define standard deviation of parameters
sd=data.frame('h'=1,'n'=1,'m'=2.5)
# Define uncertainty analysis sample count
sample_count=1000
# Gravitational constant [m/s2]
g=9.8
# Draf coefficient [-]
cd=1.3
# Air density [Kg / m3]
rho=1.2
# Effective area [m2]
A=.7
# Set up simulation time steps
time_sequence=seq(0,60,1)
# Compute starting vertical distance
vertical_distance_m=h0
# Compute bundy cord elasticity related info
bungy_cord=data.frame('elastisity_constant'=bungy_cord_elastisity_constant,
'strand_count'=n0,
'length_m'=bungy_cord_length_m)
bungy_cord$k=bungy_cord$elastisity_constant*bungy_cord$strand_count
# Compute person related info
person=data.frame('weight_kg'=m0,
'position_m'=vertical_distance_m)
# Define dataframe to store simulation results
time_series_data=as.data.frame(data.frame('sample_id'=0, # sample id
vertical_distance_m,
bungy_cord,
'weight_kg'=person$weight_kg,
'time'=time_sequence, # sequence of time points
'position_m'=person$position_m,
'dz_dt'=0)) # velocity
# Run bungy_model
time_series_data=bungy_model(time_series_data)
# Run bungy_model UA
time_series_data_net=UA(sample_count,h0,m0,n0,sd)
# Compute lowest position over time for each simulation
UA_data=dcast(
melt(time_series_data_net[,c('sample_id',
'position_m',
'vertical_distance_m',
'strand_count',
'weight_kg')],
id='sample_id'),
sample_id~variable,min)
setwd(paste(dir, 'Classwork','ABE4662', 'leap_of_faith','out',sep='/'))
##pdf('results.pdf')
# Compute percentage of hitting the ground, or dropping bellow safe distance
p_death=nrow(UA_data[UA_data$position_m<0,])/sample_count
p_beyond_safe_distance=nrow(UA_data[UA_data$position_m<safe_distance,])/sample_count
ggplot()+
geom_hline(yintercept=0,col='red')+
geom_hline(yintercept=safe_distance,linetype='dashed')+
geom_point(data=time_series_data_net,
aes(time,position_m),
alpha=0.4)+
geom_line(data=time_series_data,
aes(time,position_m),col='red')+
ggtitle(paste('prob(death) = ',
p_death,
' & prob(falling bellow ',
safe_distance,
' ms) = ',
p_beyond_safe_distance,sep=''))+
theme_bw()
par(mfrow=c(4,1))
plot(density(UA_data$strand_count),
main=paste('strand_count: ',paste(round(min(UA_data$strand_count),2),round(max(UA_data$strand_count),2),sep='~'),sep=''))
plot(density(UA_data$vertical_distance_m),
main=paste('vertical_distance_m: ',paste(round(min(UA_data$vertical_distance_m),2),round(max(UA_data$vertical_distance_m),2),sep='~'),sep=''))
plot(density(UA_data$weight_kg),
main=paste('weight_kg: ',paste(round(min(UA_data$weight_kg),2),round(max(UA_data$weight_kg),2),sep='~'),sep=''))
plot(density(UA_data$position_m),
main=paste('position_m: ',paste(round(min(UA_data$position_m),2),round(max(UA_data$position_m),2),sep='~'),sep=''))
par(mfrow=c(1,1))
#dev.off()
setwd(dir)
# If multiple simulation were run, compute sensitivity to each paramater
if(nrow(UA_data)>1){
print(lm(position_m~vertical_distance_m,UA_data))
print(lm(position_m~strand_count,UA_data))
print(lm(position_m~weight_kg,UA_data))
}
dir=getwd()
source('~/Classwork/ABE4662/leap_of_faith/main.R')
source('~/Classwork/ABE4662/leap_of_faith/main.R')
#setwd(paste(dir, 'Classwork','ABE4662', 'leap_of_faith', 'src',sep='/'))
files=list.files()
dir=getwd()
#setwd(paste(dir, 'Classwork','ABE4662', 'leap_of_faith', 'src',sep='/'))
files=list.files()
setwd(paste(dir, 'Classwork','ABE4662', 'leap_of_faith', 'src',sep='/'))
source('~/Classwork/ABE4662/leap_of_faith/main.R')
source('~/Classwork/ABE4662/leap_of_faith/main.R')
source('~/Classwork/ABE4662/leap_of_faith/main.R')
source('~/Classwork/ABE4662/leap_of_faith/main.R')
source('~/Classwork/ABE4662/leap_of_faith/main.R')
source('~/Classwork/ABE4662/leap_of_faith/main.R')
m0=80 # Mass of individual [Kg]
source('~/Classwork/ABE4662/leap_of_faith/main.R')
source('~/Classwork/ABE4662/leap_of_faith/main.R')
?source()
?apply()
getMethod('apply')
apply
source('~/work/Data/Citra2016/DIPI/main.R')
source('~/work/Data/Citra2016/DIPI/main.R')
return(results)
source('~/work/Data/Citra2016/DIPI/src/calcDIPI.R')
source('~/work/Data/Citra2016/DIPI/main.R')
source('~/work/Data/Citra2016/DIPI/main.R')
source('~/work/Data/Citra2016/DIPI/main.R')
warnings()
source('~/work/Data/Citra2016/DIPI/main.R')
source('~/work/Data/Citra2016/DIPI/src/calcDIPI.R')
source('~/work/Data/Citra2016/DIPI/main.R')
source('~/work/Data/Citra2016/DIPI/src/calcDIPI.R')
source('~/work/Data/Citra2016/DIPI/main.R')
source('~/work/Data/Citra2016/DIPI/main.R')
source('~/work/Data/Citra2016/DIPI/main.R')
View(dpTab)
View(PI)
View(data)
source('~/work/Data/Citra2016/DIPI/main.R')
View(selectLines)
View(dpTab)
source('~/work/Data/Citra2016/DIPI/main.R')
View(dpTab)
source('~/work/Data/Citra2016/DIPI/main.R')
View(dpTab)
####### Plots #########
calDf <- dpTab[dpTab$geno=='CAL',]
View(calDf)
?plot()
####### Plots #########
calDf <- dpTab[dpTab$geno=='CAL',]
plot(calDf$DIPI, calDf$Tavg)
plot(calDf$Tavg, calDf$DIPI)
####### means DIPI for each seson of select lines #########
avgDIPI <- aggregate(dpTab$DIPI, by = list(dpTab$site, dpTab$geno), FUN=mean)
View(avgDIPI)
colnames(avgDIPI) <- c('site', 'geno', 'DIPI')
####### RESULTS means DIPI for each seson of select lines #########
setwd(paste(wd,'work','Data','Citra2016', 'DIPI', 'out', sep = '/'))
write.csv(avgDIPI, 'selectDIPI.csv')
View(data)
range(data)
range(data$DAP)
avgDIPI <- aggregate(dpTab$DIPI[dpTab$DAP <= 30 & dpTab$DAP >= 15], by = list(dpTab$site, dpTab$geno), FUN=mean)
avgDIPI <- aggregate(dpTab$DIPI[dpTab$DAP <= 30 & dpTab$DAP >= 15,], by = list(dpTab$site, dpTab$geno), FUN=mean)
avgDIPI <- aggregate(dpTab[dpTab$DAP <= 30 & dpTab$DAP >= 15], by = list(dpTab$site, dpTab$geno), FUN=mean)
avgDIPI <- aggregate(dpTab[dpTab$DAP <= 30 & dpTab$DAP >= 15, 'DIPI'], by = list(dpTab$site, dpTab$geno), FUN=mean)
range(data$DAP, na.rm=T)
source('~/work/Data/Citra2016/DIPI/main.R')
range(data$DAP, na.rm=T)
#range(data$DAP, na.rm=T)
dpTab1 <- subset(dpTab, DAP >= 15 & DAP <=30)
View(dpTab1)
avgDIPI <- aggregate(dpTab1$DIPI, by = list(dpTab1$site, dpTab1$geno), FUN=mean)
colnames(avgDIPI) <- c('site', 'geno', 'DIPI')
write.csv(avgDIPI, 'selectDIPI.csv')
View(avgDIPI)
weatherAll[weatherAll$DAP >=15 & weatherAll$DAP <=30,]
piTemp1 <- aggregate(weatherAll[,c('Tmin', 'Tavg', 'Tmax')], by = list(weatherAll$site), FUN=mean)
View(data)
View(piTemp1)
