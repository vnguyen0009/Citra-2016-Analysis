pi
convert.fft(fft(pressure$pressure))
convert.fft <- function(cs, sample.rate=1) {
cs <- cs / length(cs) # normalize
distance.center <- function(c)signif( Mod(c),        4)
angle           <- function(c)signif( 180*Arg(c)/pi, 3)
df <- data.frame(cycle    = 0:(length(cs)-1),
freq     = 0:(length(cs)-1) * sample.rate / length(cs),
strength = sapply(cs, distance.center),
delay    = sapply(cs, angle))
df
}
convert.fft(fft(pressure$pressure))
fft(pressure$pressure)
abs(fft(pressure$pressure))
convert.fft(fft(pressure$pressure))
magnitude <- abs(fft(pressure$pressure))
convert <- convert.fft(fft(pressure$pressure))
View(convert)
N <- 3 #num of harmonics
time = pressure$time
for (ii in 2:N){
Amp <- convert[ii,'strength']
freq <- convert[ii, 'freq']
phi <- convert[ii,'delay']
result <- convert[1,'strength'] + sum(sin(Amp*2*pi*time)*cos(phi) + cos(Amp*2*pi*time)*sin(phi))
}
for (jj in 1:pressure$time){
for (ii in 2:N){
Amp <- convert[ii,'strength']
freq <- convert[ii, 'freq']
phi <- convert[ii,'delay']
result <- convert[1,'strength'] + sum(sin(Amp*2*pi*jj)*cos(phi) + cos(Amp*2*pi*jj)*sin(phi))
}
}
for (jj in 1:length(pressure$time)){
for (ii in 2:N){
Amp <- convert[ii,'strength']
freq <- convert[ii, 'freq']
phi <- convert[ii,'delay']
result <- convert[1,'strength'] + sum(sin(Amp*2*pi*jj)*cos(phi) + cos(Amp*2*pi*jj)*sin(phi))
}
}
plot(pressure$time, pressure$pressure)
pressure = data.frame("time" = seq(0,1,by=0.05),
'pressure' = c(700.2397,
742.2864,
916.9421,
1254.933,
1575.135,
1691.572,
1688.338,
1615.565,
1526.62,
1457.081,
1398.862,
1345.495,
1298.597,
1248.464,
1182.16,
1114.238,
1033.379,
949.2857,
847.4032,
705.0913,
580.5683
))
pressure$time = as.numeric(pressure$time)
fft(pressure$pressure)
# cs is the vector of complex points to convert
convert.fft <- function(cs, sample.rate=1) {
cs <- cs / length(cs) # normalize
distance.center <- function(c)signif( Mod(c),        4)
angle           <- function(c)signif( 180*Arg(c)/pi, 3)
df <- data.frame(cycle    = 0:(length(cs)-1),
freq     = 0:(length(cs)-1) * sample.rate / length(cs),
strength = sapply(cs, distance.center),
delay    = sapply(cs, angle))
df
}
convert <- convert.fft(fft(pressure$pressure))
plot(pressure$time, pressure$pressure)
result <- DC + sum(Amp*sin(wavelength*time+phi))
DC <- convert$strength[1]
for (ii in c(1:21)){
Amp <- convert$strength[1:N]
wavelength <- convert$freq[1:N]
phi <- convert$delay[1:N]
result <- DC + sum(Amp*sin(wavelength*time+phi))
}
for (ii in c(1:21)){
Amp <- convert$strength[1:N]
wavelength <- convert$freq[1:N]
phi <- convert$delay[1:N]
result <- DC + sum(Amp*sin(wavelength*ii+phi))
}
result <- DC + sum(Amp*sin(wavelength*ii+phi))
rm(list = ls())
pressure = data.frame("time" = seq(0,1,by=0.05),
'pressure' = c(700.2397,742.2864,916.9421,1254.933,1575.135,1691.572,
1688.338,1615.565,1526.62,1457.081,1398.862,1345.495,
1298.597,1248.464,1182.16,1114.238,1033.379,949.2857,
847.4032,705.0913,580.5683))
pressure$time = as.numeric(pressure$time)
dr = 0.0001
mu = 2.87E-3 #Pa*s
L = 0.05 #m
R = 0.005 #m
flow <- function(radius, delta_P){
Vz = delta_P/(4*mu*L)*(R^2 - radius^2)
return(Vz)
}
plot(pressure$time, pressure$pressure)
for (ii in seq(0:R,dr)){
Vz = flow(ii, pressure$pressure)
print(Vz)
}
plot(0,0, ylim = c(0,80))
for (ii in seq(0:R,dr)){
Vz = flow(ii, pressure$pressure)
print(Vz)
lines(pressure$time, Vz, col='red')
}
plot(0,0, ylim = c(0,80), xlim = c(0,1))
for (ii in seq(0:R,dr)){
Vz = flow(ii, pressure$pressure)
print(Vz)
lines(pressure$time, Vz, col='red')
}
plot(0,0, ylim = c(0,80), xlim = c(0,1), xlab = 'Time', ylab = 'Velocity')
for (ii in seq(0:R,dr)){
Vz = flow(ii, pressure$pressure)
print(Vz)
lines(pressure$time, Vz, col='red')
}
seq(0:R,dr)
for (ii in seq(0,R,dr)){
Vz = flow(ii, pressure$pressure)
print(Vz)
lines(pressure$time, Vz, col='red')
}
plot(0,0, ylim = c(0,80), xlim = c(0,1), xlab = 'Time', ylab = 'Velocity')
for (ii in seq(0,R,dr)){
Vz = flow(ii, pressure$pressure)/10 #division by 10 to get velocityfrom dynes/cm^2 to m/s
print(Vz)
lines(pressure$time, Vz, col='red')
}
plot(0,0, ylim = c(0,8), xlim = c(0,1), xlab = 'Time', ylab = 'Velocity')
for (ii in seq(0,R,dr)){
Vz = flow(ii, pressure$pressure)/10 #division by 10 to get velocityfrom dynes/cm^2 to m/s
print(Vz)
lines(pressure$time, Vz, col='red')
}
plot(0,0, ylim = c(0,8), xlim = c(0,1), xlab = 'Time (s)', ylab = 'Velocity (m/s)')
for (ii in seq(0,R,dr)){
Vz = flow(ii, pressure$pressure)/10 #division by 10 to get velocityfrom dynes/cm^2 to m/s
print(Vz)
lines(pressure$time, Vz, col='red')
}
setwd("~/work/Data/Citra2016/analysis/TraitCorrelation")
rm(list=ls())
library(dplyr)
library(plyr)
library(ggplot2)
library(reshape2)
wd <- getwd()
setwd(paste(wd,'data', sep='/'))
DW <- read.csv('DW 4 1 19.csv', row.names=1, na.strings = c('', 'NA', '*', '.', '?'), stringsAsFactors = F)
seed <- read.csv('FH seed 9 11 18.csv', row.names=1, na.strings = c('', 'NA', '*', '.', '?'), stringsAsFactors = F)
flapjack <- read.csv('flapjack.csv', na.strings = c('', 'NA', '*', '.', '?'), stringsAsFactors = F)
FH <- DW[DW$HNO==11,]
seed100 <- seed[,c('plot', 'X100SD')]
GH <- flapjack[,c('RIL', 'Fin')]
data <- merge(seed100, FH, all.x=T, by='plot')
data <- data[,c(1,2,4:12,15,19)]
meanData <- aggregate(data[,c(2:11)], by = list(data$geno, data$site), na.rm=T, FUN=mean)
colnames(meanData)[1:2] <- c('geno', 'site')
meltedData <- melt(meanData, id = c('site', 'geno', 'X100SD'))
wGH <- merge(meltedData, GH, by.x = 'geno', by.y='RIL', all.x=T)
RIL <- wGH[is.na(wGH$Fin)==F,]
p <- ggplot(meltedData)
allPlot <- p + #geom_smooth(aes(x = meltedData$X100SD,
#               y = meltedData$value,
#              color=as.factor(meltedData$site)), se=F) +
geom_point(aes(x = meltedData$X100SD,
y = meltedData$value,
#color=as.factor(meltedData$site)),
alpha=0.5)) +
coord_cartesian(ylim = c()) +
theme(legend.position = "bottom")+
labs(title = 'Total Population',
x = '100 Seed Weight (g)',
y = 'Trait Value (g)',
color = 'Growing Seasons' ) +
#scale_fill_discrete(name = 'Growing Seasons') +
facet_wrap(~meltedData$variable, scales='free') +
theme_bw() +
scale_alpha(guide = 'none')
seasonPlot <- p + #geom_smooth(aes(x = meltedData$X100SD,
#               y = meltedData$value,
#              color=as.factor(meltedData$site)), se=F) +
geom_point(aes(x = meltedData$X100SD,
y = meltedData$value,
color=as.factor(meltedData$site),
alpha=0.5)) +
coord_cartesian(ylim = c()) +
theme(legend.position = "bottom")+
labs(title = 'Total Population',
x = '100 Seed Weight (g)',
y = 'Trait Value (g)',
color = 'Season' ) +
scale_fill_discrete(name = 'Growing Seasons') +
facet_wrap(~meltedData$variable, scales='free') +
theme_bw() +
scale_alpha(guide = 'none')
r <- ggplot(RIL)
determPlot <- r + #geom_smooth(aes(x = meltedData$X100SD,
#               y = meltedData$value,
#              color=as.factor(meltedData$site)), se=F) +
geom_point(aes(x = RIL$X100SD,
y = RIL$value,
color=as.factor(RIL$Fin),
alpha=0.5)) +
coord_cartesian(ylim = c()) +
theme(legend.position = "bottom")+
labs(title = 'RIL Population',
x = '100 Seed Weight (g)',
y = 'Trait Value (g)',
color = 'Fin' ) +
#scale_fill_discrete(name = 'Growing Seasons') +
facet_wrap(~RIL$variable, scales='free') +
theme_bw() +
scale_alpha(guide = 'none')
print(allPlot)
print(seasonPlot)
print(allPlot)
print(seasonPlot)
print(determPlot)
View(RIL)
r <- ggplot(RIL)
determPlot <- r + #geom_smooth(aes(x = meltedData$X100SD,
#               y = meltedData$value,
#              color=as.factor(meltedData$site)), se=F) +
geom_point(aes(x = X100SD,
y = value,
color=as.factor(Fin),
alpha=0.5)) +
coord_cartesian(ylim = c()) +
theme(legend.position = "bottom")+
labs(title = 'RIL Population',
x = '100 Seed Weight (g)',
y = 'Trait Value (g)',
color = 'Fin' ) +
#scale_fill_discrete(name = 'Growing Seasons') +
facet_wrap(~variable, scales='free') +
theme_bw() +
scale_alpha(guide = 'none')
print(determPlot)
