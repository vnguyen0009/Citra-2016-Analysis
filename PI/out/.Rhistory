#install.packages('gdata')
library(ggplot2);library(reshape2);library(gdata)
setwd(paste(dir, 'Classwork','ABE4662', 'leap_of_faith', 'src',sep='/'))
files=list.files()
for(file in files){source(file)}
setwd(dir)
# Set defaul parameter values
h0=233 # Height of drop [m]
m0=85 # Mass of individual [Kg]
bungy_cord_length_m=80 # bungy cord length [m]
bungy_cord_elastisity_constant=0.1 # bungy cord elastisity for each strand
n0=100 # Bungy cord strand count [-]
safe_distance=10 # Safe distance to gound [m]
# Define standard deviation of parameters
sd=data.frame('h'=1,'n'=1,'m'=2.5)
# Define uncertainty analysis sample count
sample_count=1000
# Gravitational constant [m/s2]
g=9.8
# Draf coefficient [-]
cd=1.3
# Air density [Kg / m3]
rho=1.2
# Effective area [m2]
A=.7
# Set up simulation time steps
time_sequence=seq(0,60,1)
# Compute starting vertical distance
vertical_distance_m=h0
# Compute bundy cord elasticity related info
bungy_cord=data.frame('elastisity_constant'=bungy_cord_elastisity_constant,
'strand_count'=n0,
'length_m'=bungy_cord_length_m)
bungy_cord$k=bungy_cord$elastisity_constant*bungy_cord$strand_count
# Compute person related info
person=data.frame('weight_kg'=m0,
'position_m'=vertical_distance_m)
# Define dataframe to store simulation results
time_series_data=as.data.frame(data.frame('sample_id'=0, # sample id
vertical_distance_m,
bungy_cord,
'weight_kg'=person$weight_kg,
'time'=time_sequence, # sequence of time points
'position_m'=person$position_m,
'dz_dt'=0)) # velocity
# Run bungy_model
time_series_data=bungy_model(time_series_data)
# Compute change in velocity
netFoce = gForce - dForce - bForce
source('~/Classwork/ABE4662/leap_of_faith/main.R')
source('~/Classwork/ABE4662/leap_of_faith/main.R')
source('~/Classwork/ABE4662/leap_of_faith/main.R')
source('~/Classwork/ABE4662/leap_of_faith/main.R')
View(time_series_data)
source('~/Classwork/ABE4662/leap_of_faith/main.R')
View(UA_data)
source('~/Classwork/ABE4662/leap_of_faith/main.R')
View(time_series_data)
pdf('results.pdf')
dev.off()
dev.off()
source('~/Classwork/ABE4662/leap_of_faith/main.R')
View(time_series_data)
source('~/Classwork/ABE4662/leap_of_faith/main.R')
View(time_series_data)
source('~/Classwork/ABE4662/leap_of_faith/main.R')
View(time_series_data)
warnings()
source('~/Classwork/ABE4662/leap_of_faith/main.R')
warnings()
source('~/Classwork/ABE4662/leap_of_faith/main.R')
par(mfrow=c(4,1))
plot(density(UA_data$strand_count),
main=paste('strand_count: ',paste(round(min(UA_data$strand_count),2),round(max(UA_data$strand_count),2),sep='~'),sep=''))
plot(density(UA_data$vertical_distance_m),
main=paste('vertical_distance_m: ',paste(round(min(UA_data$vertical_distance_m),2),round(max(UA_data$vertical_distance_m),2),sep='~'),sep=''))
dev.off()
dev.off()
ggplot()+
geom_hline(yintercept=0,col='red')+
geom_hline(yintercept=safe_distance,linetype='dashed')+
geom_point(data=time_series_data_net,
aes(time,position_m),
alpha=0.4)+
geom_line(data=time_series_data,
aes(time,position_m),col='red')+
ggtitle(paste('prob(death) = ',
p_death,
' & prob(falling bellow ',
safe_distance,
' ms) = ',
p_beyond_safe_distance,sep=''))+
theme_bw()
par(mfrow=c(4,1))
plot(density(UA_data$strand_count),
main=paste('strand_count: ',paste(round(min(UA_data$strand_count),2),round(max(UA_data$strand_count),2),sep='~'),sep=''))
plot(density(UA_data$vertical_distance_m),
main=paste('vertical_distance_m: ',paste(round(min(UA_data$vertical_distance_m),2),round(max(UA_data$vertical_distance_m),2),sep='~'),sep=''))
plot(density(UA_data$weight_kg),
main=paste('weight_kg: ',paste(round(min(UA_data$weight_kg),2),round(max(UA_data$weight_kg),2),sep='~'),sep=''))
plot(density(UA_data$position_m),
main=paste('position_m: ',paste(round(min(UA_data$position_m),2),round(max(UA_data$position_m),2),sep='~'),sep=''))
par(mfrow=c(1,1))
plot(density(UA_data$strand_count),
main=paste('strand_count: ',paste(round(min(UA_data$strand_count),2),round(max(UA_data$strand_count),2),sep='~'),sep=''))
plot(density(UA_data$vertical_distance_m),
main=paste('vertical_distance_m: ',paste(round(min(UA_data$vertical_distance_m),2),round(max(UA_data$vertical_distance_m),2),sep='~'),sep=''))
plot(density(UA_data$weight_kg),
main=paste('weight_kg: ',paste(round(min(UA_data$weight_kg),2),round(max(UA_data$weight_kg),2),sep='~'),sep=''))
plot(density(UA_data$position_m),
main=paste('position_m: ',paste(round(min(UA_data$position_m),2),round(max(UA_data$position_m),2),sep='~'),sep=''))
par(mfrow=c(1,1))
ggplot()+
geom_hline(yintercept=0,col='red')+
geom_hline(yintercept=safe_distance,linetype='dashed')+
geom_point(data=time_series_data_net,
aes(time,position_m),
alpha=0.4)+
geom_line(data=time_series_data,
aes(time,position_m),col='red')+
ggtitle(paste('prob(death) = ',
p_death,
' & prob(falling bellow ',
safe_distance,
' ms) = ',
p_beyond_safe_distance,sep=''))+
theme_bw()
par(mfrow=c(4,1))
citation(dplyr,ggplot2)
citation(dplyr)
citation(ggplot2)
citation('ggplot2')
citation(c('ggplot2', 'dplyr', 'plyr', 'reshape2'))
citation('ggplot2')
citation('dplyr')
citation('plyr')
citation('reshape2')
?lm()
?lm.fit()
citation()
# Set defaul parameter values
h0=233 # Height of drop [m]
# Set defaul parameter values
h0=233 # Height of drop [m]
source('~/Classwork/ABE4662/leap_of_faith/main.R')
source('~/Classwork/ABE4662/leap_of_faith/main.R')
source('~/Classwork/ABE4662/leap_of_faith/main.R')
# Set defaul parameter values
h0=233 # Height of drop [m]
m0=49 # Mass of individual [Kg]
bungy_cord_length_m=80 # bungy cord length [m]
bungy_cord_elastisity_constant=0.1 # bungy cord elastisity for each strand
n0=100 # Bungy cord strand count [-]
safe_distance=10 # Safe distance to gound [m]
# Define standard deviation of parameters
sd=data.frame('h'=1,'n'=1,'m'=2.5)
# Define uncertainty analysis sample count
sample_count=1000
# Gravitational constant [m/s2]
g=9.8
# Draf coefficient [-]
cd=1.3
# Air density [Kg / m3]
rho=1.2
# Effective area [m2]
A=.7
# Set up simulation time steps
time_sequence=seq(0,60,1)
# Compute starting vertical distance
vertical_distance_m=h0
# Compute bundy cord elasticity related info
bungy_cord=data.frame('elastisity_constant'=bungy_cord_elastisity_constant,
'strand_count'=n0,
'length_m'=bungy_cord_length_m)
bungy_cord$k=bungy_cord$elastisity_constant*bungy_cord$strand_count
# Compute person related info
person=data.frame('weight_kg'=m0,
'position_m'=vertical_distance_m)
# Define dataframe to store simulation results
time_series_data=as.data.frame(data.frame('sample_id'=0, # sample id
vertical_distance_m,
bungy_cord,
'weight_kg'=person$weight_kg,
'time'=time_sequence, # sequence of time points
'position_m'=person$position_m,
'dz_dt'=0)) # velocity
# Run bungy_model
time_series_data=bungy_model(time_series_data)
# Run bungy_model UA
time_series_data_net=UA(sample_count,h0,m0,n0,sd)
# Compute lowest position over time for each simulation
UA_data=dcast(
melt(time_series_data_net[,c('sample_id',
'position_m',
'vertical_distance_m',
'strand_count',
'weight_kg')],
id='sample_id'),
sample_id~variable,min)
setwd(paste(dir, 'Classwork','ABE4662', 'leap_of_faith','out',sep='/'))
##pdf('results.pdf')
# Compute percentage of hitting the ground, or dropping bellow safe distance
p_death=nrow(UA_data[UA_data$position_m<0,])/sample_count
p_beyond_safe_distance=nrow(UA_data[UA_data$position_m<safe_distance,])/sample_count
ggplot()+
geom_hline(yintercept=0,col='red')+
geom_hline(yintercept=safe_distance,linetype='dashed')+
geom_point(data=time_series_data_net,
aes(time,position_m),
alpha=0.4)+
geom_line(data=time_series_data,
aes(time,position_m),col='red')+
ggtitle(paste('prob(death) = ',
p_death,
' & prob(falling bellow ',
safe_distance,
' ms) = ',
p_beyond_safe_distance,sep=''))+
theme_bw()
par(mfrow=c(4,1))
plot(density(UA_data$strand_count),
main=paste('strand_count: ',paste(round(min(UA_data$strand_count),2),round(max(UA_data$strand_count),2),sep='~'),sep=''))
plot(density(UA_data$vertical_distance_m),
main=paste('vertical_distance_m: ',paste(round(min(UA_data$vertical_distance_m),2),round(max(UA_data$vertical_distance_m),2),sep='~'),sep=''))
plot(density(UA_data$weight_kg),
main=paste('weight_kg: ',paste(round(min(UA_data$weight_kg),2),round(max(UA_data$weight_kg),2),sep='~'),sep=''))
plot(density(UA_data$position_m),
main=paste('position_m: ',paste(round(min(UA_data$position_m),2),round(max(UA_data$position_m),2),sep='~'),sep=''))
par(mfrow=c(1,1))
#dev.off()
setwd(dir)
# If multiple simulation were run, compute sensitivity to each paramater
if(nrow(UA_data)>1){
print(lm(position_m~vertical_distance_m,UA_data))
print(lm(position_m~strand_count,UA_data))
print(lm(position_m~weight_kg,UA_data))
}
dir=getwd()
source('~/Classwork/ABE4662/leap_of_faith/main.R')
source('~/Classwork/ABE4662/leap_of_faith/main.R')
#setwd(paste(dir, 'Classwork','ABE4662', 'leap_of_faith', 'src',sep='/'))
files=list.files()
dir=getwd()
#setwd(paste(dir, 'Classwork','ABE4662', 'leap_of_faith', 'src',sep='/'))
files=list.files()
setwd(paste(dir, 'Classwork','ABE4662', 'leap_of_faith', 'src',sep='/'))
source('~/Classwork/ABE4662/leap_of_faith/main.R')
source('~/Classwork/ABE4662/leap_of_faith/main.R')
source('~/Classwork/ABE4662/leap_of_faith/main.R')
source('~/Classwork/ABE4662/leap_of_faith/main.R')
source('~/Classwork/ABE4662/leap_of_faith/main.R')
source('~/Classwork/ABE4662/leap_of_faith/main.R')
m0=80 # Mass of individual [Kg]
source('~/Classwork/ABE4662/leap_of_faith/main.R')
source('~/Classwork/ABE4662/leap_of_faith/main.R')
?source()
?apply()
getMethod('apply')
apply
r <- ggplot(determ, aes(label = geno))
plot3 <- r + geom_histogram(aes(x=determ$slope, fill=determ$Fin)) +
coord_cartesian(ylim = c()) +
theme() +
labs( x = paste('Slope'),
title = paste('RIJC Histogram of Linear Regression Slopes for Citra 2016', sep=' ') ) +
theme_bw() +
scale_alpha(guide = 'none')+
facet_grid(rows = vars(determ$Fin)) +
geom_text(aes(label = ifelse(determ$geno %in% determ[grep('CAL|JAM', determ$geno),'geno'],
as.character(geno), ''), x = determ$slope, y = 5))
source('~/work/Data/Citra2016/Citra-2016-Analysis/PI/main.R')
r <- ggplot(determ, aes(label = geno))
plot3 <- r + geom_histogram(aes(x=determ$slope, fill=determ$site)) +
coord_cartesian(ylim = c()) +
theme() +
labs( x = paste('Slope'),
title = paste('RIJC Histogram of Linear Regression Slopes for Citra 2016', sep=' ') ) +
theme_bw() +
scale_alpha(guide = 'none')+
facet_grid(rows = vars(determ$Fin)) +
geom_text(aes(label = ifelse(determ$geno %in% determ[grep('CAL|JAM', determ$geno),'geno'],
as.character(geno), ''), x = determ$slope, y = 5))
print(plot3)
r <- ggplot(determ, aes(label = geno, fill=determ$Fin))
plot3 <- r + geom_histogram(aes(x=determ$slope)) +
coord_cartesian(ylim = c()) +
theme() +
labs( x = paste('Slope'),
title = paste('RIJC Histogram of Linear Regression Slopes for Citra 2016', sep=' ') ) +
theme_bw() +
scale_alpha(guide = 'none')+
facet_grid(rows = vars(determ$Fin)) +
geom_text(aes(label = ifelse(determ$geno %in% determ[grep('CAL|JAM', determ$geno),'geno'],
as.character(geno), ''), x = determ$slope, y = 5))
print(plot3)
r <- ggplot(determ, aes(label = geno, colour=determ$Fin))
plot3 <- r + geom_histogram(aes(x=determ$slope)) +
coord_cartesian(ylim = c()) +
theme() +
labs( x = paste('Slope'),
title = paste('RIJC Histogram of Linear Regression Slopes for Citra 2016', sep=' ') ) +
theme_bw() +
scale_alpha(guide = 'none')+
facet_grid(rows = vars(determ$Fin)) +
geom_text(aes(label = ifelse(determ$geno %in% determ[grep('CAL|JAM', determ$geno),'geno'],
as.character(geno), ''), x = determ$slope, y = 5))
print(plot3)
r <- ggplot(determ, aes(colour=determ$Fin))
plot3 <- r + geom_histogram(aes(x=determ$slope)) +
coord_cartesian(ylim = c()) +
theme() +
labs( x = paste('Slope'),
title = paste('RIJC Histogram of Linear Regression Slopes for Citra 2016', sep=' ') ) +
theme_bw() +
scale_alpha(guide = 'none')+
facet_grid(rows = vars(determ$Fin))
print(plot3)
plot3 <- r + geom_density(aes(x=determ$slope)) +
coord_cartesian(ylim = c()) +
theme() +
labs( x = paste('Slope'),
title = paste('RIJC Histogram of Linear Regression Slopes for Citra 2016', sep=' ') ) +
theme_bw() +
scale_alpha(guide = 'none')+
facet_grid(rows = vars(determ$Fin))
print(plot3)
r <- ggplot(determ, aes(fill=determ$Fin))
plot3 <- r + geom_density(aes(x=determ$slope)) +
coord_cartesian(ylim = c()) +
theme() +
labs( x = paste('Slope'),
title = paste('RIJC Histogram of Linear Regression Slopes for Citra 2016', sep=' ') ) +
theme_bw() +
scale_alpha(guide = 'none')+
facet_grid(rows = vars(determ$Fin))
print(plot3)
r <- ggplot(determ, aes())
plot3 <- r + geom_density(aes(x=determ$slope, fill=determ$Fin)) +
coord_cartesian(ylim = c()) +
theme() +
labs( x = paste('Slope'),
title = paste('RIJC Histogram of Linear Regression Slopes for Citra 2016', sep=' ') ) +
theme_bw() +
scale_alpha(guide = 'none')+
facet_grid(rows = vars(determ$Fin))
print(plot3)
plot3 <- r + geom_density(aes(x=determ$slope, colour=determ$Fin)) +
coord_cartesian(ylim = c()) +
theme() +
labs( x = paste('Slope'),
title = paste('RIJC Histogram of Linear Regression Slopes for Citra 2016', sep=' ') ) +
theme_bw() +
scale_alpha(guide = 'none')+
facet_grid(rows = vars(determ$Fin))
print(plot3)
r <- ggplot(determ, aes())
plot3 <- r + geom_density(aes(x=determ$slope, colour=Fin)) +
coord_cartesian(ylim = c()) +
theme() +
labs( x = paste('Slope'),
title = paste('RIJC Histogram of Linear Regression Slopes for Citra 2016', sep=' ') ) +
theme_bw() +
scale_alpha(guide = 'none')+
facet_grid(rows = vars(determ$Fin))
print(plot3)
plot3 <- r + geom_density(aes(x=determ$slope, fill=Fin)) +
coord_cartesian(ylim = c()) +
theme() +
labs( x = paste('Slope'),
title = paste('RIJC Histogram of Linear Regression Slopes for Citra 2016', sep=' ') ) +
theme_bw() +
scale_alpha(guide = 'none')+
facet_grid(rows = vars(determ$Fin))
print(plot3)
plot3 <- r + geom_density(aes(x=determ$slope, fill=Fin)) +
coord_cartesian(ylim = c()) +
theme() +
labs( x = paste('Slope'),
title = paste('RIJC Histogram of Linear Regression Slopes for Citra 2016', sep=' ') ) +
theme_bw() +
scale_alpha(guide = 'none')+
facet_grid(rows = vars(determ$site))
print(plot3)
plot3 <- r + geom_density(aes(x=determ$slope, fill=Fin, alpha=0.2)) +
coord_cartesian(ylim = c()) +
theme() +
labs( x = paste('Slope'),
title = paste('RIJC Histogram of Linear Regression Slopes for Citra 2016', sep=' ') ) +
theme_bw() +
scale_alpha(guide = 'none')+
facet_grid(rows = vars(determ$site))
print(plot3)
r <- ggplot(determ, aes())
plot3 <- r + geom_density(aes(x=determ$slope, fill=vars(Fin), alpha=0.2)) +
coord_cartesian(ylim = c()) +
theme() +
labs( x = paste('Slope'),
title = paste('PI Citra 2016', sep=' ') ) +
theme_bw() +
scale_alpha(guide = 'none')+
facet_grid(rows = vars(determ$site))
print(plot3)
View(Fin)
plot3 <- r + geom_density(aes(x=determ$slope, fill=as.factor(Fin), alpha=0.2)) +
coord_cartesian(ylim = c()) +
theme() +
labs( x = paste('Slope'),
title = paste('PI Citra 2016', sep=' ') ) +
theme_bw() +
scale_alpha(guide = 'none')+
facet_grid(rows = vars(determ$site))
print(plot3)
View(determ)
r <- ggplot(determ, aes())
plot3 <- r + geom_density(aes(x=determ$slope, fill=as.factor(Fin), alpha=0.2)) +
coord_cartesian(ylim = c()) +
theme() +
labs( x = paste('Slope'),
title = paste('PI Citra 2016', sep=' ') ) +
theme_bw() +
scale_alpha(guide = 'none')+
facet_grid(rows = vars(determ$site)) +
scale_fill_discrete(name="Determinacy",
labels=c("Indet", "Det"))
print(plot3)
determ[,is.na(determ$Fin)==T]
determ[is.na(determ$Fin)==T,]
determ[is.na(determ$Fin)==T,'geno']
unique(determ[is.na(determ$Fin)==T,'geno'])
unique(determ[is.na(determ$Fin),'geno'])
#################### RIJC PLOTS ###################################
RIJC <- meanRIL[grep('RIJC|CAL|JAM',meanRIL$geno), ]
Fin <- flapjack[, c('RIL', 'Fin')] #set up variable to find determinency
determ <- merge(RIJC, Fin, by.x = 'geno', by.y = 'RIL', all.x=T)
unique(determ[is.na(determ$Fin),'geno'])
View(determ)
r <- ggplot(determ[is.na(determ$Fin)==F,], aes())
plot3 <- r + geom_density(aes(x=slope, fill=as.factor(Fin), alpha=0.2)) +
coord_cartesian(ylim = c()) +
theme() +
labs( x = paste('Slope'),
title = paste('PI Citra 2016', sep=' ') ) +
theme_bw() +
scale_alpha(guide = 'none')+
facet_grid(rows = vars(site)) +
scale_fill_discrete(name="Determinacy",
labels=c("Indet", "Det"))
print(plot3)
source('~/work/Data/Citra2016/Citra-2016-Analysis/PI/main.R')
dev.off()
dev.off()
dev.off()
source('~/work/Data/Citra2016/Citra-2016-Analysis/PI/main.R')
plot1 <- p + geom_density(aes(x=meanRIL$slope)) +
coord_cartesian(ylim = c()) +
theme() +
labs( x = paste('Slope'),
title = paste('Histogram of Linear Regression Slopes for Citra 2016', sep=' ') ) +
theme_bw() +
scale_alpha(guide = 'none')+
facet_grid(rows = vars(meanRIL$site)) +
geom_text(aes(label = ifelse(meanRIL$geno %in% meanRIL[grep('CAL|JAM', meanRIL$geno),'geno'],
as.character(geno), ''), x = meanRIL$slope, y = 5))
print(plot1)
plot2 <- q + geom_density(aes(x=RIJC$slope)) +
coord_cartesian(ylim = c()) +
theme() +
labs( x = paste('Slope'),
title = paste('RIJC Histogram of Linear Regression Slopes for Citra 2016', sep=' ') ) +
theme_bw() +
scale_alpha(guide = 'none')+
facet_grid(rows = vars(RIJC$site)) +
geom_text(aes(label = ifelse(RIJC$geno %in% RIJC[grep('CAL|JAM', RIJC$geno),'geno'],
as.character(geno), ''), x = RIJC$slope, y = 5))
print(plot2)
source('~/work/Data/Citra2016/Citra-2016-Analysis/PI/main.R')
q <- ggplot(RIJC, aes(label = geno, fill='grey'))
plot2 <- q + geom_density(aes(x=RIJC$slope)) +
coord_cartesian(ylim = c()) +
theme() +
labs( x = paste('Slope'),
title = paste('RIJC Histogram of Linear Regression Slopes for Citra 2016', sep=' ') ) +
theme_bw() +
scale_alpha(guide = 'none')+
facet_grid(rows = vars(RIJC$site)) +
geom_text(aes(label = ifelse(RIJC$geno %in% RIJC[grep('CAL|JAM', RIJC$geno),'geno'],
as.character(geno), ''), x = RIJC$slope, y = 5))
print(plot2)
q <- ggplot(RIJC, aes(label = geno, fill='gray'))
plot2 <- q + geom_density(aes(x=RIJC$slope)) +
coord_cartesian(ylim = c()) +
theme() +
labs( x = paste('Slope'),
title = paste('RIJC Histogram of Linear Regression Slopes for Citra 2016', sep=' ') ) +
theme_bw() +
scale_alpha(guide = 'none')+
facet_grid(rows = vars(RIJC$site)) +
geom_text(aes(label = ifelse(RIJC$geno %in% RIJC[grep('CAL|JAM', RIJC$geno),'geno'],
as.character(geno), ''), x = RIJC$slope, y = 5))
print(plot2)
q <- ggplot(RIJC, aes(label = geno, fill=))
plot2 <- q + geom_density(aes(x=RIJC$slope)) +
coord_cartesian(ylim = c()) +
theme() +
labs( x = paste('Slope'),
title = paste('RIJC Histogram of Linear Regression Slopes for Citra 2016', sep=' ') ) +
theme_bw() +
scale_alpha(guide = 'none')+
facet_grid(rows = vars(RIJC$site)) +
geom_text(aes(label = ifelse(RIJC$geno %in% RIJC[grep('CAL|JAM', RIJC$geno),'geno'],
as.character(geno), ''), x = RIJC$slope, y = 5))
print(plot2)
