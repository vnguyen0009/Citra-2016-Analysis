seasonResults <- aggregate(results[c('slope', 'inter', 'r2')], by = list(results$site), FUN =mean, na.rm=T)
colnames(seasonResults)[1] = 'site'
s1Slope <- meanRIL[meanRIL$site==1, 'slope']
s2Slope <- meanRIL[meanRIL$site==2, 'slope']
t.test(s1Slope,s2Slope)
View(meanRIL)
t.test(s1Slope,s2Slope, na.rm=T)
t.test(DIPI_pheno[DIPI_pheno$site==1,], DIPI_pheno[DIPI_pheno$site==2,])
rm(list=ls())
#install.packages("qtl")
# tutorial
# http://www.rqtl.org/tutorials/
library(qtl)
#?read.cross()
#ls("package:qtl")
# parameters
step_size = 5   # step size (cM)
cofactor_size = 3   # cofactor window (cM)
it_max=1   # iterations
LOD_thr=1.18 # LOD for p-value = 0.001
#LOD_thr=0.59 # LOD for p-value = 0.05
dir=getwd()
# source extra functions
setwd(paste(dir,'src',sep='/'))
files=list.files()
for(file in files){source(file)}
setwd(dir)
####### Make phenotype File for DIPI ##############
phenoREF <- read.csv(paste(dir,'data', 'phenotype.csv', sep='/'))
DIPI <- read.csv(paste(dir,'data', 'DIPI.csv', sep='/'), row.names = 1)
DIPI_geno <- aggregate(DIPI$slope, by= list(DIPI$site, DIPI$RIL), FUN=mean, na.rm=T)
colnames(DIPI_geno) <- c('site', 'RIL', 'DIPI')
DIPI_1 <- DIPI_geno[DIPI_geno$site==1,c('RIL', 'DIPI')]
DIPI_2 <- DIPI_geno[DIPI_geno$site==2, c('RIL','DIPI')]
DIPI_pheno <- merge(phenoREF, DIPI_1, all.x=T, by='RIL')
DIPI_pheno <- merge(DIPI_pheno, DIPI_2, all.x=T, by='RIL')
####### Make phenotype File for DIPI ##############
phenoREF <- read.csv(paste(dir,'data', 'phenotype.csv', sep='/'))
setwd("~/work/Data/Citra2016/Citra-2016-Analysis/rQTL")
rm(list=ls())
#install.packages("qtl")
# tutorial
# http://www.rqtl.org/tutorials/
library(qtl)
#?read.cross()
#ls("package:qtl")
# parameters
step_size = 5   # step size (cM)
cofactor_size = 3   # cofactor window (cM)
it_max=1   # iterations
LOD_thr=1.18 # LOD for p-value = 0.001
#LOD_thr=0.59 # LOD for p-value = 0.05
dir=getwd()
# source extra functions
setwd(paste(dir,'src',sep='/'))
files=list.files()
for(file in files){source(file)}
setwd(dir)
####### Make phenotype File for DIPI ##############
phenoREF <- read.csv(paste(dir,'data', 'phenotype.csv', sep='/'))
DIPI <- read.csv(paste(dir,'data', 'DIPI.csv', sep='/'), row.names = 1)
DIPI_geno <- aggregate(DIPI$slope, by= list(DIPI$site, DIPI$RIL), FUN=mean, na.rm=T)
colnames(DIPI_geno) <- c('site', 'RIL', 'DIPI')
DIPI_1 <- DIPI_geno[DIPI_geno$site==1,c('RIL', 'DIPI')]
DIPI_2 <- DIPI_geno[DIPI_geno$site==2, c('RIL','DIPI')]
DIPI_pheno <- merge(phenoREF, DIPI_1, all.x=T, by='RIL')
DIPI_pheno <- merge(DIPI_pheno, DIPI_2, all.x=T, by='RIL')
t.test(DIPI_pheno[DIPI_pheno$site==1,], DIPI_pheno[DIPI_pheno$site==2,])
t.test(DIPI_pheno$DIPI.x, DIPI_pheno$DIPI.y)
rm(list = ls())
library(plyr)
library(dplyr)
library(ggplot2)
setwd(paste('C:/Users/Vy/Documents'))
wd <- getwd()
setwd(paste(wd,'work','Data','Citra2016','Citra-2016-Analysis', 'PI', 'src', sep = '/'))
source('findSlope.R')
source('plotPI.R')
######LOAD DATA ##########
data <- read.csv('pIndex_citra 2016_1-14-19.csv', header = T, na.strings = c('NA', '', '#NUM!', '#REF!', '#VALUE!'), stringsAsFactors=T)
geno <- read.csv('PtoGen.csv', header = T, stringsAsFactors=T)
flapjack <- read.csv('flapjack.csv', header = T, stringsAsFactors = T)
#Flapjack was uploaded to find the determinency of the lines
setwd(paste(wd,'work','Data','Citra2016','Citra-2016-Analysis', 'PI', 'out', sep = '/'))
####### CORRECT PI FILE FORMAT #######
PIT <- data[c('Plot.ID', 'site', 'Plant.ID', 'PIT1', 'PIT2', 'PIT3', 'T1..DAP.', 'T2.DAP.', 'T3.DAP.')]
pit1 <- data[c('Plot.ID', 'Plant.ID', 'PIT1', 'T1..DAP.', 'site')]
colnames(pit1) <- c('plot', 'rep', 'PI', 'DAP', 'site')
pit2 <- data[c('Plot.ID', 'Plant.ID', 'PIT2', 'T2.DAP.', 'site')]
colnames(pit2) <- c('plot', 'rep', 'PI', 'DAP', 'site')
pit3 <- data[c('Plot.ID', 'Plant.ID', 'PIT3', 'T3.DAP.', 'site')]
colnames(pit3) <- c('plot', 'rep', 'PI', 'DAP', 'site')
pit <- rbind(pit1, pit2)
pit <- rbind(pit, pit3)
noNApit <- pit[is.na(pit$PI)==F & is.na(pit$DAP)==F,]
write.csv(noNApit, file='RAW_PI.csv')
###### FIND SLOPES PI VS DAP ########
byPlot = by(noNApit, INDICES=list(noNApit$site, noNApit$plot, noNApit$rep), FUN=findSlope)
results <- do.call("rbind", byPlot)
resultsRIL <- merge(results, geno, by = 'plot', all.x=T)
#write.csv(resultsRIL, file = 'DIPI.csv')
meanRIL <- aggregate(resultsRIL[,c('slope', 'inter', 'r2')], by = list(resultsRIL$geno, resultsRIL$site), FUN=mean, na.rm=T)
colnames(meanRIL)[1:2] <- c('geno', 'site')
seasonResults <- aggregate(results[c('slope', 'inter', 'r2')], by = list(results$site), FUN =mean, na.rm=T)
colnames(seasonResults)[1] = 'site'
s1Slope <- meanRIL[meanRIL$site==1, 'slope']
s2Slope <- meanRIL[meanRIL$site==2, 'slope']
t.test(s1Slope,s2Slope, na.rm=T)
rm(list=ls())
#install.packages("qtl")
# tutorial
# http://www.rqtl.org/tutorials/
library(qtl)
#?read.cross()
#ls("package:qtl")
# parameters
step_size = 5   # step size (cM)
cofactor_size = 3   # cofactor window (cM)
it_max=1   # iterations
LOD_thr=1.18 # LOD for p-value = 0.001
#LOD_thr=0.59 # LOD for p-value = 0.05
dir=getwd()
# source extra functions
setwd(paste(dir,'src',sep='/'))
files=list.files()
for(file in files){source(file)}
setwd(dir)
####### Make phenotype File for DIPI ##############
phenoREF <- read.csv(paste(dir,'data', 'phenotype.csv', sep='/'))
DIPI <- read.csv(paste(dir,'data', 'DIPI.csv', sep='/'), row.names = 1)
DIPI_geno <- aggregate(DIPI$slope, by= list(DIPI$site, DIPI$RIL), FUN=mean, na.rm=T)
colnames(DIPI_geno) <- c('site', 'RIL', 'DIPI')
DIPI_1 <- DIPI_geno[DIPI_geno$site==1,c('RIL', 'DIPI')]
DIPI_2 <- DIPI_geno[DIPI_geno$site==2, c('RIL','DIPI')]
DIPI_pheno <- merge(phenoREF, DIPI_1, all.x=T, by='RIL')
DIPI_pheno <- merge(DIPI_pheno, DIPI_2, all.x=T, by='RIL')
t.test(DIPI_pheno$DIPI.x, DIPI_pheno$DIPI.y)
setwd("~/work/Data/Citra2016/Citra-2016-Analysis/rQTL")
rm(list=ls())
#install.packages("qtl")
# tutorial
# http://www.rqtl.org/tutorials/
library(qtl)
#?read.cross()
#ls("package:qtl")
# parameters
step_size = 5   # step size (cM)
cofactor_size = 3   # cofactor window (cM)
it_max=1   # iterations
LOD_thr=1.18 # LOD for p-value = 0.001
#LOD_thr=0.59 # LOD for p-value = 0.05
dir=getwd()
# source extra functions
setwd(paste(dir,'src',sep='/'))
files=list.files()
for(file in files){source(file)}
setwd(dir)
####### Make phenotype File for DIPI ##############
phenoREF <- read.csv(paste(dir,'data', 'phenotype.csv', sep='/'))
DIPI <- read.csv(paste(dir,'data', 'DIPI.csv', sep='/'), row.names = 1)
DIPI_geno <- aggregate(DIPI$slope, by= list(DIPI$site, DIPI$RIL), FUN=mean, na.rm=T)
colnames(DIPI_geno) <- c('site', 'RIL', 'DIPI')
DIPI_1 <- DIPI_geno[DIPI_geno$site==1,c('RIL', 'DIPI')]
DIPI_2 <- DIPI_geno[DIPI_geno$site==2, c('RIL','DIPI')]
DIPI_pheno <- merge(phenoREF, DIPI_1, all.x=T, by='RIL')
DIPI_pheno <- merge(DIPI_pheno, DIPI_2, all.x=T, by='RIL')
t.test(DIPI_pheno$DIPI.x, DIPI_pheno$DIPI.y)
################################
### Reading data & diagnosis ###
################################
data = read.cross(dir = paste(dir,'data',sep='/'),
format = "csvs",
genfile = "genotype_AB.csv",
phefile = 'DIPI_phenotype.csv',
F.gen = 11,
na.strings=c('NA'))
genotype <- read.csv(paste(dir, 'data', 'genotype_AB.csv', sep='/'))
genotype <- genotype$RIL
phenoREF <- read.csv(paste(dir,'data', 'phenotype.csv', sep='/'))
genotype <- read.csv(paste(dir, 'data', 'genotype_AB.csv', sep='/'))
DIPI <- read.csv(paste(dir,'data', 'DIPI.csv', sep='/'), row.names = 1)
genotype <- genotype$RIL
DIPI_geno <- aggregate(DIPI$slope, by= list(DIPI$site, DIPI$RIL), FUN=mean, na.rm=T)
colnames(DIPI_geno) <- c('site', 'RIL', 'DIPI')
DIPI_1 <- DIPI_geno[DIPI_geno$site==1,c('RIL', 'DIPI')]
DIPI_2 <- DIPI_geno[DIPI_geno$site==2, c('RIL','DIPI')]
DIPI_pheno <- merge(genotype, DIPI_1, all.x=T, by='RIL')
DIPI_pheno <- merge(DIPI_pheno, DIPI_2, all.x=T, by='RIL')
t.test(DIPI_pheno$DIPI.x, DIPI_pheno$DIPI.y)
################################
### Reading data & diagnosis ###
################################
data = read.cross(dir = paste(dir,'data',sep='/'),
format = "csvs",
genfile = "genotype_AB.csv",
phefile = 'DIPI_phenotype.csv',
F.gen = 11,
na.strings=c('NA'))
## Make sure that CSVs are not encoded in UTF-8-BOM, this could produce problems
# convert to RI lines
data=convert2riself(data)
# extract trait and genotpe id
data$pheno=data$pheno[,c('DIPI.y','RIL')]
summary(data)
#plot(data)
head(data$pheno)
# estimate pair-wise recombination factor
data = est.rf(data)
# compute genotype probability
data = calc.genoprob(data, step = step_size)
# compute imputations
data = sim.geno(data, step = step_size, n.draws = 100)
# Simple Interval Mapping (SIM) with Haley-Knott regression
SIM_hk=scanone(cross = data, method = 'hk', n.cluster = 4)
# Threshold SIM_hk results with LOD_thr
SIM=threshold(SIM_hk, LOD_thr)
#########
# This CIM still needs some work, because the cim from the qtl package is a little weird...
#########
# Composite Interval Maping (CIM)
# with Haley-Knott regression
# 1 marker covariable
# step size of 5 cM
for(it in 1:it_max){
if(it == 1){
CIM_hk = cim(cross = data,
n.marcovar=1,
window = cofactor_size,
method = 'hk')
}else{
CIM_hk = CIM_hk + cim(cross = data,
n.marcovar=1,
window = cofactor_size,
method = 'hk')
}
}
# compute mean LOD value
CIM_hk$lod=CIM_hk$lod/it_max
SIM=threshold(SIM_hk,LOD_thr)
CIM=threshold(CIM_hk,LOD_thr)
# plot CIM results with LOD = 3 threshold line
plot(SIM_hk,
CIM_hk,
SIM,
col=c("black",'blue','red'),
type=c('l','l','p'),
ylim=c(0,ceiling(max(SIM_hk$lod)*1.5)),
main = 'LOD score from CIM: SIM values in black, CIM values in blue'); abline(h=LOD_thr, col='red')
# multiple QTL model with markers selected form CIM
# chromosome #s from CIM
(chr = as.numeric(SIM$chr))
# positional #s from CIM
(pos = as.numeric(SIM$pos))
# generate QTL object
(QTL = makeqtl(data, chr, pos))
# Define formula as only additive QTL effects
formula=paste('y~',
paste(
paste('Q',
c(1:nrow(SIM)),
sep = ''),
collapse = '+'),
sep='')
# Fit multi-QTL model with initial QTLs
QTL_model = fitqtl(data, qtl = QTL,formula = formula, get.ests = T, method = 'hk')
summary(QTL_model)
# make small adjustments to QLT positions to test for better fits
refQTL <- refineqtl(data, qtl=QTL, formula = formula)
# enure refQTL are on actual markers by finding closes real marker
refQTL=find.markerpos(cross = data,
marker = find.marker(cross = data,
chr = refQTL$chr,
pos = refQTL$pos))
# make QTL object
(refQTL=makeqtl(cross = data,chr = refQTL$chr, pos = refQTL$pos, qtl.name = rownames(refQTL)))
# Fit multi-QTL model with  refQTLs
refQTL_model = fitqtl(data, qtl = refQTL,formula = formula, get.ests = T, method = 'hk')
summary(refQTL_model)
rm(list = ls())
library(plyr)
library(dplyr)
library(ggplot2)
setwd(paste('C:/Users/Vy/Documents'))
wd <- getwd()
setwd(paste(wd,'work','Data','Citra2016','Citra-2016-Analysis', 'PI', 'src', sep = '/'))
source('findSlope.R')
source('plotPI.R')
######LOAD DATA ##########
data <- read.csv('pIndex_citra 2016_1-14-19.csv', header = T, na.strings = c('NA', '', '#NUM!', '#REF!', '#VALUE!'), stringsAsFactors=T)
geno <- read.csv('PtoGen.csv', header = T, stringsAsFactors=T)
flapjack <- read.csv('flapjack.csv', header = T, stringsAsFactors = T)
#Flapjack was uploaded to find the determinency of the lines
setwd(paste(wd,'work','Data','Citra2016','Citra-2016-Analysis', 'PI', 'out', sep = '/'))
####### CORRECT PI FILE FORMAT #######
PIT <- data[c('Plot.ID', 'site', 'Plant.ID', 'PIT1', 'PIT2', 'PIT3', 'T1..DAP.', 'T2.DAP.', 'T3.DAP.')]
pit1 <- data[c('Plot.ID', 'Plant.ID', 'PIT1', 'T1..DAP.', 'site')]
colnames(pit1) <- c('plot', 'rep', 'PI', 'DAP', 'site')
pit2 <- data[c('Plot.ID', 'Plant.ID', 'PIT2', 'T2.DAP.', 'site')]
colnames(pit2) <- c('plot', 'rep', 'PI', 'DAP', 'site')
pit3 <- data[c('Plot.ID', 'Plant.ID', 'PIT3', 'T3.DAP.', 'site')]
colnames(pit3) <- c('plot', 'rep', 'PI', 'DAP', 'site')
pit <- rbind(pit1, pit2)
pit <- rbind(pit, pit3)
noNApit <- pit[is.na(pit$PI)==F & is.na(pit$DAP)==F,]
write.csv(noNApit, file='RAW_PI.csv')
###### FIND SLOPES PI VS DAP ########
byPlot = by(noNApit, INDICES=list(noNApit$site, noNApit$plot, noNApit$rep), FUN=findSlope)
results <- do.call("rbind", byPlot)
resultsRIL <- merge(results, geno, by = 'plot', all.x=T)
#write.csv(resultsRIL, file = 'DIPI.csv')
meanRIL <- aggregate(resultsRIL[,c('slope', 'inter', 'r2')], by = list(resultsRIL$geno, resultsRIL$site), FUN=mean, na.rm=T)
colnames(meanRIL)[1:2] <- c('geno', 'site')
seasonResults <- aggregate(results[c('slope', 'inter', 'r2')], by = list(results$site), FUN =mean, na.rm=T)
colnames(seasonResults)[1] = 'site'
s1Slope <- meanRIL[meanRIL$site==1, 'slope']
s2Slope <- meanRIL[meanRIL$site==2, 'slope']
t.test(s1Slope,s2Slope, na.rm=T)
meanRIL$geno
t.test(DIPI_pheno$DIPI.x, DIPI_pheno$DIPI.y)
setwd("~/work/Data/Citra2016/Citra-2016-Analysis/SIM")
######## CODE OBTAINED FROM Christopher Hwang M.S.
### University of Florida Ph.D. Program
###College of Engineering | Agricultural Biological Engineering
rm(list=ls())
#install.packages("qtl")
# tutorial
# http://www.rqtl.org/tutorials/
library(qtl)
#?read.cross()
#ls("package:qtl")
# parameters
step_size = 5   # step size (cM)
cofactor_size = 3   # cofactor window (cM)
it_max=1   # iterations
LOD_thr=1.18 # LOD for p-value = 0.001
#LOD_thr=0.59 # LOD for p-value = 0.05
dir=getwd()
# source extra functions
setwd(paste(dir,'src',sep='/'))
files=list.files()
for(file in files){source(file)}
setwd(dir)
####### Make phenotype File for DIPI ##############
phenoREF <- read.csv(paste(dir,'data', 'phenotype.csv', sep='/'))
DIPI <- read.csv(paste(dir,'data', 'DIPI.csv', sep='/'), row.names = 1)
DIPI_geno <- aggregate(DIPI$slope, by= list(DIPI$site, DIPI$RIL), FUN=mean, na.rm=T)
colnames(DIPI_geno) <- c('site', 'RIL', 'DIPI')
DIPI_1 <- DIPI_geno[DIPI_geno$site==1,c('RIL', 'DIPI')]
DIPI_2 <- DIPI_geno[DIPI_geno$site==2, c('RIL','DIPI')]
DIPI_pheno <- merge(phenoREF, DIPI_1, all.x=T, by='RIL')
DIPI_pheno <- merge(DIPI_pheno, DIPI_2, all.x=T, by='RIL')
DIPI_pheno <- DIPI_pheno[,c(1,5,6)]
mean(DIPI_pheno$DIPI.x, na.rm=T)
var(DIPI_pheno$DIPI.x, na.rm=T)
mean(DIPI_pheno$DIPI.y, na.rm=T)
var(DIPI_pheno$DIPI.y, na.rm=T)
t.test(DIPI_pheno$DIPI.x, DIPI_pheno$DIPI.y)
######## CODE OBTAINED FROM Christopher Hwang M.S.
### University of Florida Ph.D. Program
###College of Engineering | Agricultural Biological Engineering
rm(list=ls())
#install.packages("qtl")
# tutorial
# http://www.rqtl.org/tutorials/
library(qtl)
#?read.cross()
#ls("package:qtl")
# parameters
step_size = 5   # step size (cM)
cofactor_size = 3   # cofactor window (cM)
it_max=1   # iterations
LOD_thr=1.18 # LOD for p-value = 0.001
#LOD_thr=0.59 # LOD for p-value = 0.05
dir=getwd()
# source extra functions
setwd(paste(dir,'src',sep='/'))
files=list.files()
for(file in files){source(file)}
setwd(dir)
####### Make phenotype File for DIPI ##############
phenoREF <- read.csv(paste(dir,'data', 'phenotype.csv', sep='/'))
DIPI <- read.csv(paste(dir,'data', 'DIPI.csv', sep='/'), row.names = 1)
DIPI_geno <- aggregate(DIPI$slope, by= list(DIPI$site, DIPI$RIL), FUN=mean, na.rm=T)
colnames(DIPI_geno) <- c('site', 'RIL', 'DIPI')
DIPI_1 <- DIPI_geno[DIPI_geno$site==1,c('RIL', 'DIPI')]
DIPI_2 <- DIPI_geno[DIPI_geno$site==2, c('RIL','DIPI')]
DIPI_pheno <- merge(phenoREF, DIPI_1, all.x=T, by='RIL')
DIPI_pheno <- merge(DIPI_pheno, DIPI_2, all.x=T, by='RIL')
DIPI_pheno <- DIPI_pheno[,c(1,5,6)]
mean(DIPI_pheno$DIPI.x, na.rm=T)
var(DIPI_pheno$DIPI.x, na.rm=T)
mean(DIPI_pheno$DIPI.y, na.rm=T)
var(DIPI_pheno$DIPI.y, na.rm=T)
t.test(DIPI_pheno$DIPI.x, DIPI_pheno$DIPI.y)
#write.csv(DIPI_pheno, file=paste(dir, 'data', 'DIPI_phenotype.csv',sep='/'))
################################
### Reading data & diagnosis ###
################################
data = read.cross(dir = paste(dir,'data',sep='/'),
format = "csvs",
genfile = "genotype_AB.csv",
phefile = 'DIPI_phenotype.csv',
F.gen = 11,
na.strings=c('NA'))
## Make sure that CSVs are not encoded in UTF-8-BOM, this could produce problems
# convert to RI lines
data=convert2riself(data)
# extract trait and genotpe id
data$pheno=data$pheno[,c('DIPI.y','RIL')]
summary(data)
#plot(data)
head(data$pheno)
# Drop markers with no genotypes
#data=drop.nullmarkers(data)
# estimate pair-wise recombination factor
data = est.rf(data)
# compute genotype probability
data = calc.genoprob(data, step = step_size)
# compute imputations
data = sim.geno(data, step = step_size, n.draws = 100)
# Simple Interval Mapping (SIM) with Haley-Knott regression
SIM_hk=scanone(cross = data, method = 'hk', n.cluster = 4)
# Threshold SIM_hk results with LOD_thr
SIM=threshold(SIM_hk, LOD_thr)
SIM
data=convert2riself(data)
# extract trait and genotpe id
data$pheno=data$pheno[,c('DIPI.x','RIL')]
summary(data)
#plot(data)
head(data$pheno)
# Drop markers with no genotypes
#data=drop.nullmarkers(data)
# estimate pair-wise recombination factor
data = est.rf(data)
# compute genotype probability
data = calc.genoprob(data, step = step_size)
# compute imputations
data = sim.geno(data, step = step_size, n.draws = 100)
# Simple Interval Mapping (SIM) with Haley-Knott regression
SIM_hk=scanone(cross = data, method = 'hk', n.cluster = 4)
# Threshold SIM_hk results with LOD_thr
SIM=threshold(SIM_hk, LOD_thr)
SIM
######## CODE OBTAINED FROM Christopher Hwang M.S.
### University of Florida Ph.D. Program
###College of Engineering | Agricultural Biological Engineering
rm(list=ls())
#install.packages("qtl")
# tutorial
# http://www.rqtl.org/tutorials/
library(qtl)
#?read.cross()
#ls("package:qtl")
# parameters
step_size = 5   # step size (cM)
cofactor_size = 3   # cofactor window (cM)
it_max=1   # iterations
LOD_thr=1.18 # LOD for p-value = 0.001
#LOD_thr=0.59 # LOD for p-value = 0.05
dir=getwd()
# source extra functions
setwd(paste(dir,'src',sep='/'))
files=list.files()
for(file in files){source(file)}
setwd(dir)
####### Make phenotype File for DIPI ##############
phenoREF <- read.csv(paste(dir,'data', 'phenotype.csv', sep='/'))
DIPI <- read.csv(paste(dir,'data', 'DIPI.csv', sep='/'), row.names = 1)
DIPI_geno <- aggregate(DIPI$slope, by= list(DIPI$site, DIPI$RIL), FUN=mean, na.rm=T)
colnames(DIPI_geno) <- c('site', 'RIL', 'DIPI')
DIPI_1 <- DIPI_geno[DIPI_geno$site==1,c('RIL', 'DIPI')]
DIPI_2 <- DIPI_geno[DIPI_geno$site==2, c('RIL','DIPI')]
DIPI_pheno <- merge(phenoREF, DIPI_1, all.x=T, by='RIL')
DIPI_pheno <- merge(DIPI_pheno, DIPI_2, all.x=T, by='RIL')
DIPI_pheno <- DIPI_pheno[,c(1,5,6)]
mean(DIPI_pheno$DIPI.x, na.rm=T)
var(DIPI_pheno$DIPI.x, na.rm=T)
mean(DIPI_pheno$DIPI.y, na.rm=T)
var(DIPI_pheno$DIPI.y, na.rm=T)
t.test(DIPI_pheno$DIPI.x, DIPI_pheno$DIPI.y)
#write.csv(DIPI_pheno, file=paste(dir, 'data', 'DIPI_phenotype.csv',sep='/'))
################################
### Reading data & diagnosis ###
################################
data = read.cross(dir = paste(dir,'data',sep='/'),
format = "csvs",
genfile = "genotype_AB.csv",
phefile = 'DIPI_phenotype.csv',
F.gen = 11,
na.strings=c('NA'))
## Make sure that CSVs are not encoded in UTF-8-BOM, this could produce problems
# convert to RI lines
data=convert2riself(data)
# extract trait and genotpe id
data$pheno=data$pheno[,c('DIPI.x','RIL')]
summary(data)
#plot(data)
head(data$pheno)
# Drop markers with no genotypes
#data=drop.nullmarkers(data)
# estimate pair-wise recombination factor
data = est.rf(data)
# compute genotype probability
data = calc.genoprob(data, step = step_size)
# compute imputations
data = sim.geno(data, step = step_size, n.draws = 100)
# Simple Interval Mapping (SIM) with Haley-Knott regression
SIM_hk=scanone(cross = data, method = 'hk', n.cluster = 4)
# Threshold SIM_hk results with LOD_thr
SIM=threshold(SIM_hk, LOD_thr)
SIM
